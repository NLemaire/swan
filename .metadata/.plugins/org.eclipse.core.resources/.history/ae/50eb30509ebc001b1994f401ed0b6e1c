module Swan;

with Math.*;
with BathyLib.*;

itemtypes { node, cell , face}

// nodes collection
connectivity nodes: → {node};

// faces collection
connectivity faces: → {face};
connectivity innerFaces: → {face};
connectivity InnerVerticalFaces: → {face};
connectivity InnerHorizontalFaces: → {face};

// cells collection
connectivity cells: → {cell};
connectivity innerCells: → {cell};
connectivity topCells: → {cell};
connectivity bottomCells: → {cell};
connectivity leftCells: → {cell};
connectivity rightCells: → {cell};

// cell related collection
connectivity rightFaceOfCell: cell → face;
connectivity leftFaceOfCell : cell → face;
connectivity topFaceOfCell : cell → face;
connectivity bottomFaceOfCell: cell → face;
connectivity rightCell: cell → cell;
connectivity leftCell: cell → cell;
connectivity topCell: cell → cell;
connectivity bottomCell: cell → cell;

// face related collection
connectivity backCell: face → cell;
connectivity frontCell: face → cell;
connectivity bottomFaceNeighbour: face → face;
connectivity bottomLeftFaceNeighbour: face → face;
connectivity bottomRightFaceNeighbour: face → face;
connectivity topFaceNeighbour: face → face;
connectivity topLeftFaceNeighbour: face → face;
connectivity topRightFaceNeighbour: face → face;
connectivity rightFaceNeighbour: face → face;
connectivity leftFaceNeighbour: face → face;

// options
option ℝ X_EDGE_LENGTH = 20.0;
option ℝ Y_EDGE_LENGTH = 20.0;
option ℾ DConst = true;
option ℝ Dini = -1000.0;
option ℝ δt = 0.008;
option ℝ F = 0.0; // Coriolis parameter
option ℕ maxIter = 5000000;
option ℝ stopTime = 20.0;

let ℝ δx = X_EDGE_LENGTH;
let ℝ δy = Y_EDGE_LENGTH;
let ℝ g = -9.8; // -9.8
let ℝ C = 40.0; // De Chezy coefficient, C ∈ [20, 80]

ℝ t;
ℝ[2] X{nodes};

ℝ U{faces}; // velocity in x direction
ℝ Uini{faces}; 
ℝ V{faces}; // velocity in y direction
ℝ Vini{faces}; 
ℝ H{cells}; // wave height above mean water level
ℝ Hini{cells}; //
ℝ Rijini{cells}; // bottom motion 
ℝ Rij{cells}; // bottom motion
ℝ[2] Fw{cells}; // forcing function of wind stress and barometric pressure  
ℝ Dijini{cells}; // depth ( < 0)
ℝ Dij{cells}; // depth ( < 0)

ℝ Bool{cells}; // 0 -> Island  1 -> Water

iterate n while (t^{n+1} < stopTime && n < maxIter);

InitTime: t^{n=0} = 0.0;

// forcing function initialization
InitFw: ∀c∈cells(), 
{
	Fw{c} = [0.0, 0.0];
}

// depth initialization
InitDijini:
	if(DConst)
		∀ic∈innerCells(), Dijini{ic} = Dini;
	else
		∀ic∈innerCells(), Dijini{ic} = nextDepth();

InitDij:
{
	∀tc∈topCells(),    ∀bc∈bottomCell(tc), Dij{tc} = Dijini{bc};
	∀bc∈bottomCells(), ∀tc∈topCell(bc), Dij{bc} = Dijini{tc}; 
	∀lc∈leftCells(),   ∀rc∈rightCell(lc), Dij{lc} = Dijini{rc}; 
	∀rc∈rightCells(),  ∀lc∈leftCell(rc), Dij{rc} = Dijini{lc};
	∀ic∈innerCells(),  Dij{ic} = Dijini{ic}; 
}

InitBool:∀c∈cells(), 
{
	if(Dij{c} >= 0.0)
		Bool{c} = 0.0; //Island
	else
		Bool{c} = 1.0; //Water
}

// bottom motion
InitRijini: ∀ic∈innerCells(), Rijini{ic} = 0.0;

InitRij: 
{
	∀tc∈topCells(),    ∀bc∈bottomCell(tc), Rij^{n=0}{tc} = Rijini{bc};
	∀bc∈bottomCells(), ∀tc∈topCell(bc), Rij^{n=0}{bc} = Rijini{tc}; 
	∀lc∈leftCells(),   ∀rc∈rightCell(lc), Rij^{n=0}{lc} = Rijini{rc}; 
	∀rc∈rightCells(),  ∀lc∈leftCell(rc), Rij^{n=0}{rc} = Rijini{lc};
	∀ic∈innerCells(),  Rij^{n=0}{ic} = Rijini{ic};
}

// wave initialization 
InitHini: ∀ic∈innerCells(),
{
	Hini{ic} = nextWaveHeight() * Bool{ic};
}

// trick to initialize Boundary Condition on H
InitH:
{
	∀t∈topCells(), ∀bt∈bottomCell(t), H^{n=0}{t} = Hini{bt};
	∀b∈bottomCells(), ∀tb∈topCell(b), H^{n=0}{b} = Hini{tb};
	∀l∈leftCells(), ∀rl∈rightCell(l), H^{n=0}{l} = Hini{rl};
	∀r∈rightCells(), ∀lr∈leftCell(r), H^{n=0}{r} = Hini{lr};
	∀ic∈innerCells(), H^{n=0}{ic} = Hini{ic};
}

// x velocity initialization
InitUini: ∀f∈innerFaces(), Uini{f} = 0.0;

// trick to initialize Boundary Condition on U
InitU:
{
	∀tc∈topCells(), ∀rf∈rightFaceOfCell(tc), ∀bc∈bottomCell(tc), ∀brf∈rightFaceOfCell(bc),
		U^{n=0}{rf} = Uini{brf};
	∀bc∈bottomCells(), ∀rf∈rightFaceOfCell(bc), ∀tc∈topCell(bc), ∀trf∈rightFaceOfCell(tc),
		U^{n=0}{rf} = Uini{trf};
	∀lc∈leftCells(), ∀lf∈leftFaceOfCell(lc), ∀rf∈rightFaceOfCell(lc),
		U^{n=0}{lf} = Uini{rf};
	∀rc∈rightCells(), ∀rf∈rightFaceOfCell(rc), ∀lf∈leftFaceOfCell(rc),
		U^{n=0}{rf} = Uini{lf};
}

// y velocity initialization
InitVini: ∀f∈innerFaces(), Vini{f} = 0.0;

// trick to initialize Boundary Condition on V
InitV:
{
	∀tc∈topCells(), ∀bf∈bottomFaceOfCell(tc), ∀tf∈topFaceOfCell(tc),
		V^{n=0}{tf} = Vini{bf};
	∀bc∈bottomCells(), ∀bf∈bottomFaceOfCell(bc), ∀tf∈topFaceOfCell(bc),
		V^{n=0}{bf} = Vini{tf};
	∀lc∈leftCells(), ∀bf∈bottomFaceOfCell(lc), ∀rc∈rightCell(lc), ∀bfrc∈bottomFaceOfCell(rc),
		V^{n=0}{bf} = Vini{bfrc};
	∀rc∈rightCells(), ∀bf∈bottomFaceOfCell(rc), ∀lc∈leftCell(rc), ∀bflc∈bottomFaceOfCell(lc),
		V^{n=0}{bf} = Vini{bflc};
}

// compute new wave height using the numerical schema 
UpdateHinner:∀ic∈innerCells(), 
{
	let ℝ TD1 = 0.0;
	let ℝ TD2 = 0.0;
	let ℝ TV1 = 0.0;
	let ℝ TV2 = 0.0;
	
	// computeTD1;
	∀ rf ∈ rightFaceOfCell(ic),
		if (U^{n}{rf} < 0)
			∀ rc ∈ rightCell(ic),
				TD1 = Dij{rc} + H^{n}{rc} - Rij^{n}{rc};
		else
			TD1 = Dij{ic} + H^{n}{ic}  - Rij^{n}{ic};

	// computeTD2;
	∀ lf ∈ leftFaceOfCell(ic),
		if( U^{n}{lf} < 0)
			TD2 = Dij{ic} + H^{n}{ic} - Rij^{n}{ic};
		else
			∀ lc ∈ leftCell(ic),
				TD2 = Dij{lc} + H^{n}{lc} - Rij^{n}{lc};

	// computeTV1;
	∀ tf ∈ topFaceOfCell(ic),
		if( V^{n}{tf} < 0)
			∀ tc ∈ topCell(ic),
				TV1 = Dij{tc} + H^{n}{tc} - Rij^{n}{tc};
		else
			TV1 = Dij{ic} + H^{n}{ic} - Rij^{n}{ic};

	// computeTV2;	
	∀ bf ∈ bottomFaceOfCell(ic),
		if( V^{n}{bf} < 0)
			TV2 = Dij{ic} + H^{n}{ic} - Rij^{n}{ic};
		else
			∀ bc ∈ bottomCell(ic),
			TV2 = Dij{bc} + H^{n}{bc} - Rij^{n}{bc};

	// computeH^{n+1}
	∀rf∈rightFaceOfCell(ic), ∀lf∈leftFaceOfCell(ic), ∀ tf ∈ topFaceOfCell(ic), ∀bf∈bottomFaceOfCell(ic), 
		H^{n+1}{ic} = (H^{n}{ic} - δt*(U^{n}{rf} * TD1 / δx - U^{n}{lf} * TD2 / δx + V^{n}{tf} * TV1 / δy - V^{n}{bf} * TV2 / δy) + Rij^{n+1}{ic} - Rij^{n}{ic}) * Bool{ic};
}

// update boundary condition for wave height
UpdateHouter:  
{
	∀tc∈topCells(), ∀bc∈bottomCell(tc),
		H^{n+1}{tc} = H^{n}{bc};
	∀bc∈bottomCells(), ∀tc∈topCell(bc),
		H^{n+1}{bc} = H^{n}{tc};
	∀lc∈leftCells(), ∀rc∈rightCell(lc),
		H^{n+1}{lc} = H^{n}{rc};
	∀rc∈rightCells(), ∀lc∈leftCell(rc),
		H^{n+1}{rc} = H^{n}{lc};
}

// compute new x velocity using the numerical schema
UpdateUinner:∀civf∈InnerVerticalFaces(),
{
	let ℝ TV = 0.0;
	let ℝ TU1 = 0.0;
	let ℝ TU2 = 0.0;
	let ℝ THU = 0.0;
	let ℝ SB = 0.0;
	
	// compute TV
	∀fij∈bottomRightFaceNeighbour(civf),
	∀fijplus1∈topRightFaceNeighbour(civf),
	∀fimoins1jplus1∈topLeftFaceNeighbour(civf),
	∀fimoins1j∈bottomLeftFaceNeighbour(civf),
		TV = 0.25 * (V^{n}{fij} + V^{n}{fijplus1} + V^{n}{fimoins1jplus1} + V^{n}{fimoins1j});

	// compute TU1
	if(U^{n}{civf} < 0)
		∀fiplus1j∈rightFaceNeighbour(civf),
			TU1  = U^{n}{fiplus1j} -U^{n}{civf};
	else
		∀fimoins1j∈leftFaceNeighbour(civf),
			TU1 = U^{n}{civf} - U^{n}{fimoins1j};

	// compute TU2
	if(TV < 0)
		∀fijplus1∈topFaceNeighbour(civf),
			TU2 = U^{n}{fijplus1} - U^{n}{civf};
	else
		∀fijmoins1∈bottomFaceNeighbour(civf),
			TU2 = U^{n}{civf} - U^{n}{fijmoins1};

	// compute THU
	∀cij∈frontCell(civf), ∀cimoins1j∈leftCell(cij),
		THU = H^{n}{cij} - H^{n}{cimoins1j};

	// compute SB
	∀cij∈frontCell(civf), ∀fijv∈bottomRightFaceNeighbour(civf),
		SB = g * U^{n}{civf} * ( √(U^{n}{civf}*U^{n}{civf} + V^{n}{fijv} * V^{n}{fijv})) / (C * C * (Dij{cij} + H^{n}{cij}));

	// compute U^{n+1}
	∀fijv∈bottomRightFaceNeighbour(civf),
	∀cij∈frontCell(civf),
	∀cimoins1j∈backCell(civf),
		U^{n+1}{civf} = (U^{n}{civf} - δt*(U^{n}{civf} * TU1 / δx + TV * TU2 / δy) - (g * δt * THU )/ δx  + δt * ( - F * V^{n}{fijv} - Fw{cij}[0] + SB)) * Bool{cij} * Bool{cimoins1j};
}

// update boundary condition for x velocity
UpdateUouter:
{
	∀tc∈topCells(), ∀rf∈rightFaceOfCell(tc), ∀bc∈bottomCell(tc), ∀brf∈rightFaceOfCell(bc),
		U^{n+1}{rf} = U^{n}{brf};
	∀bc∈bottomCells(), ∀rf∈rightFaceOfCell(bc), ∀bcf∈topCell(bc), ∀trf∈rightFaceOfCell(bcf),
		U^{n+1}{rf} = U^{n}{trf};
	∀lc∈leftCells(), ∀lf∈leftFaceOfCell(lc), ∀rf∈rightFaceOfCell(lc),
		U^{n+1}{lf} = U^{n}{rf};
	∀rc∈rightCells(), ∀rf∈rightFaceOfCell(rc), ∀lf∈leftFaceOfCell(rc),
		U^{n+1}{rf} = U^{n}{lf};
}

// compute new y velocity using the numerical schema
UpdateVinner:∀cihf∈InnerHorizontalFaces(),
{
	let ℝ TU = 0.0;
	let ℝ TV1 = 0.0;
	let ℝ TV2 = 0.0;
	let ℝ THV = 0.0;
	let ℝ SB = 0.0;

	// compute TU
	∀fij∈topLeftFaceNeighbour(cihf),
	∀fiplus1j∈topRightFaceNeighbour(cihf),
	∀fijmoins1∈bottomLeftFaceNeighbour(cihf),
	∀fiplus1jmoins1∈bottomRightFaceNeighbour(cihf),
		TU = 0.25 * (U^{n}{fij} + U^{n}{fiplus1j} + U^{n}{fijmoins1} + U^{n}{fiplus1jmoins1});

	// compute TV1
	if(TU < 0)
		∀fiplus1j∈rightFaceNeighbour(cihf),
			TV1  = V^{n}{fiplus1j} - V^{n}{cihf};
	else
		∀fimoins1j∈leftFaceNeighbour(cihf),
			TV1 = V^{n}{cihf} - V^{n}{fimoins1j};

	// compute TV2
	if(V^{n}{cihf} < 0)
		∀fijplus1∈topFaceNeighbour(cihf),
			TV2 = V^{n}{fijplus1} - V^{n}{cihf};
	else
		∀fijmoins1∈bottomFaceNeighbour(cihf),
			TV2 = V^{n}{cihf} - V^{n}{fijmoins1};

	// compute THV
	∀cij∈frontCell(cihf), ∀cijmoins1∈backCell(cihf),
		THV = H^{n}{cij} - H^{n}{cijmoins1};

	// compute SB
	∀cij∈frontCell(cihf), ∀fijv∈topLeftFaceNeighbour(cihf),
		SB = g * U^{n}{fijv} * ( √(U^{n}{fijv}*U^{n}{fijv} + V^{n}{cihf} * V^{n}{cihf})) / (C*C * (Dij{cij} + H^{n}{cij}));

	// compute V^{n+1}
	∀fijv∈topLeftFaceNeighbour(cihf),
	∀cij∈frontCell(cihf),
	∀cijmoins1∈backCell(cihf),
		V^{n+1}{cihf} = (V^{n}{cihf} - δt*( TU * TV1 / δx + V^{n}{cihf} * TV2 / δy) - (g * δt  * THV )/ δy + δt * ( F * U^{n}{fijv} - Fw{cij}[1] + SB) ) * Bool{cijmoins1} * Bool{cij};
}

// update boundary condition for y velocity
UpdateVouter:
{
	∀tc∈topCells(), ∀bf∈bottomFaceOfCell(tc), ∀tf∈topFaceOfCell(tc),
		V^{n+1}{tf} = V^{n}{bf};
	∀bc∈bottomCells(), ∀bf∈bottomFaceOfCell(bc), ∀tf∈topFaceOfCell(bc),
		V^{n+1}{bf} = V^{n}{tf};
	∀lc∈leftCells(), ∀bf∈bottomFaceOfCell(lc), ∀rc∈rightCell(lc), ∀bfrc∈bottomFaceOfCell(rc),
		V^{n+1}{bf} = V^{n}{bfrc};
	∀rc∈rightCells(), ∀bf∈bottomFaceOfCell(rc), ∀lc∈leftCell(rc), ∀bflc∈bottomFaceOfCell(lc),
		V^{n+1}{bf} = V^{n}{bflc};
}

// update bottom motion
UpdateRij: ∀c∈cells(), Rij^{n+1}{c} = 0.0;

ComputeTn: t^{n+1} = t^{n} + δt;
