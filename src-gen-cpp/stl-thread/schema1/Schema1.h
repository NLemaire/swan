/* DO NOT EDIT THIS FILE - it is machine generated */

#ifndef __SCHEMA1_H_
#define __SCHEMA1_H_

#include <fstream>
#include <iomanip>
#include <type_traits>
#include <limits>
#include <utility>
#include <cmath>
#include "nablalib/mesh/CartesianMesh2DFactory.h"
#include "nablalib/mesh/CartesianMesh2D.h"
#include "nablalib/mesh/PvdFileWriter2D.h"
#include "nablalib/utils/Utils.h"
#include "nablalib/utils/Timer.h"
#include "nablalib/types/Types.h"
#include "nablalib/utils/stl/Parallel.h"

using namespace nablalib::mesh;
using namespace nablalib::utils;
using namespace nablalib::types;
using namespace nablalib::utils::stl;

/******************** Free functions declarations ********************/

namespace schema1freefuncs
{
double sumR0(double a, double b);
}

/******************** Module declaration ********************/

class Schema1
{
public:
	struct Options
	{
		std::string outputPath;
		int outputPeriod;
		int maxIter;
		double maxTime;
		double X0;
		double Sigma;
		double Amp;
		double deltat;

		void jsonInit(const char* jsonContent);
	};

	Schema1(CartesianMesh2D* aMesh, Options& aOptions);
	~Schema1();

	void simulate();
	void computeHn() noexcept;
	void computeTn() noexcept;
	void computeUn() noexcept;
	void iniCenter() noexcept;
	void initU() noexcept;
	void initH() noexcept;
	void setUpTimeLoopN() noexcept;
	void executeTimeLoopN() noexcept;

private:
	void dumpVariables(int iteration, bool useTimer=true);

	// Mesh and mesh variables
	CartesianMesh2D* mesh;
	size_t nbNodes, nbCells, nbNodesOfCell;

	// User options
	Options& options;
	PvdFileWriter2D writer;

	// Timers
	Timer globalTimer;
	Timer cpuTimer;
	Timer ioTimer;

public:
	// Global variables
	int lastDump;
	int n;
	static constexpr double deltax = 1000.0;
	static constexpr double D = 1000.0;
	double t_n;
	double t_nplus1;
	std::vector<RealArray1D<2>> X;
	std::vector<double> H_n;
	std::vector<double> H_nplus1;
	std::vector<double> H_n0;
	std::vector<double> U_n;
	std::vector<double> U_nplus1;
	std::vector<double> U_n0;
	std::vector<double> center;
	static constexpr double g = 9.81;
};

#endif
